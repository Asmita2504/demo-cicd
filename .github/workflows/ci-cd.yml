name: CI CD Pipeline

on:
  push:
    branches: ["dev", "beta", "main"]
  pull_request:
    branches: ["dev", "beta", "main"]
  workflow_dispatch:

jobs:
  build:
    name: Build, Test, Lint, Artifact
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-image.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven local repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build & run tests
        run: mvn -B clean verify

      - name: Run Checkstyle (lint)
        run: mvn checkstyle:check

      - name: Generate JaCoCo report
        run: mvn jacoco:report

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: demo-jar
          path: target/*.jar

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set image tag
        id: set-image
        run: |
          echo "IMAGE_TAG=${{ secrets.DOCKERHUB_USERNAME }}/demo:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/demo:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/demo:latest

  deploy-dev:
    name: Deploy to Dev
    needs: build
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Dev server via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ secrets.DEV_SSH_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/demo:${{ github.sha }}
            docker stop demo || true
            docker rm demo || true
            docker run -d --restart unless-stopped --env-file /home/${{ secrets.DEV_USER }}/.env.dev -p 8080:8080 --name demo ${{ secrets.DOCKERHUB_USERNAME }}/demo:${{ github.sha }}

  deploy-beta:
    name: Deploy to Beta
    needs: build
    if: github.ref == 'refs/heads/beta'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Beta server via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.BETA_HOST }}
          username: ${{ secrets.BETA_USER }}
          key: ${{ secrets.BETA_SSH_KEY }}
          port: ${{ secrets.BETA_SSH_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/demo:${{ github.sha }}
            docker stop demo || true
            docker rm demo || true
            docker run -d --restart unless-stopped --env-file /home/${{ secrets.BETA_USER }}/.env.beta -p 8080:8080 --name demo ${{ secrets.DOCKERHUB_USERNAME }}/demo:${{ github.sha }}

  deploy-prod:
    name: Deploy to Production (requires approval)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to Prod server via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_SSH_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/demo:${{ github.sha }}
            docker stop demo || true
            docker rm demo || true
            docker run -d --restart unless-stopped --env-file /home/${{ secrets.PROD_USER }}/.env.prod --port 8080:8080 --name demo ${{ secrets.DOCKERHUB_USERNAME }}/demo:${{ github.sha }}
